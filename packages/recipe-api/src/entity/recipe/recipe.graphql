type Query {
  recipes: [Recipe!]!
  recipe(id: ID!): Recipe!
}

type Recipe {
  id: ID!
  title: String!
  description: String!
  ingredients: String!
  instructions: String!
  image: String
  price: Float
  userId: String!
  user: User!
  createdAt: String!
  updatedAt: String!
}

input CreateRecipeInput {
  title: String!
  description: String!
  ingredients: String!
  instructions: String!
  image: String!
  price: Float!
}

type CreateRecipeResponse implements Response {
  success: Boolean!
  message: String!
  recipe: Recipe
}

input UpdateRecipeInput {
  title: String
  description: String
  ingredients: String
  instructions: String
  image: String
  price: Float
}

type UpdateRecipeResponse implements Response {
  success: Boolean!
  message: String!
  recipe: Recipe
}

type Mutation {
  createRecipe(userId: ID!, recipe: CreateRecipeInput!): CreateRecipeResponse
  updateRecipe(recipeId:ID!, updateFields: UpdateRecipeInput!): UpdateRecipeResponse
}
