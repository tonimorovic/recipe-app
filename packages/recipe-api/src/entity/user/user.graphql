interface Response {
  success: Boolean!
  message: String!
}

type Query {
  users: [User!]!
  user(id: ID!): User!
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  avatar: String
  bio: String
  createdAt: String!
  updatedAt: String!
  recipes: [Recipe!]!
}

input RegisterUserInput {
  username: String!
  email: String!
  password: String!
}

type RegisterUserResponse implements Response {
  success: Boolean!
  message: String!
  user: User
  token: String
}

input LoginUserInput {
  email: String!
  password: String!
}

type LoginUserResponse implements Response {
  success: Boolean!
  message: String!
  user: User
  token: String
}

input UpdateUserInput {
  bio: String
  avatar: String
  password: String
}

type UpdateUserResponse implements Response {
  success: Boolean!
  message: String!
  user: User
}

type Mutation {
  registerUser(registerInput: RegisterUserInput!): RegisterUserResponse
  loginUser(loginInput: LoginUserInput!): LoginUserResponse
  updateUser(userId: ID!, updateFields: UpdateUserInput!): UpdateUserResponse
}
